generator client {
  provider = "prisma-client-js"
  // output   = "./migrations"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
  // relationMode = "prisma"
}

model User {
  id                  Int                   @id @default(autoincrement())
  login               String                @unique
  password            String
  first_name          String
  middle_name         String?
  second_middle_name  String?
  last_name           String
  email               String
  role                Role
  CourseStudent       CourseStudent[]
  StudentGroup        StudentGroup[]
  CourseOwner         CourseOwner[]
  FieldOfStudyStudent FieldOfStudyStudent[]
}

enum Role {
  admin
  teacher
  student
}

model FieldOfStudy {
  id                  Int                   @id @default(autoincrement())
  name                String                @unique
  description         String
  Course              Course[]
  FieldOfStudyStudent FieldOfStudyStudent[]
}

model FieldOfStudyStudent {
  id             Int          @id @default(autoincrement())
  studentId      Int
  student        User         @relation(fields: [userId], references: [id])
  fieldOfStudyId Int
  fieldOfStudy   FieldOfStudy @relation(fields: [fieldOfStudyId], references: [id])
  userId         Int
}

model Course {
  id                 Int                  @id @default(autoincrement())
  name               String
  description        String
  fieldOfStudyId     Int
  fieldOfStudy       FieldOfStudy         @relation(fields: [fieldOfStudyId], references: [id])
  CourseStudent      CourseStudent[]
  CourseStudentGroup CourseStudentGroup[]
  CourseOwner        CourseOwner[]
  CourseSection      CourseSection[]
}

model CourseStudent {
  id        Int    @id @default(autoincrement())
  courseId  Int
  course    Course @relation(fields: [courseId], references: [id])
  studentId Int
  student   User   @relation(fields: [userId], references: [id])
  userId    Int
}

model CourseStudentGroup {
  id             Int          @id @default(autoincrement())
  studentGroupId Int
  studentGroup   StudentGroup @relation(fields: [studentGroupId], references: [id])
  courseId       Int
  course         Course       @relation(fields: [courseId], references: [id])
}

model StudentGroup {
  id                 Int                  @id @default(autoincrement())
  studentId          Int
  student            User                 @relation(fields: [userId], references: [id])
  CourseStudentGroup CourseStudentGroup[]
  userId             Int
}

model CourseOwner {
  id       Int    @id @default(autoincrement())
  courseId Int
  course   Course @relation(fields: [courseId], references: [id])
  ownerId  Int
  owner    User   @relation(fields: [userId], references: [id])
  userId   Int
}

model Section {
  id              Int             @id @default(autoincrement())
  name            String
  descriptionHTML String
  CourseSection   CourseSection[]
}

model CourseSection {
  id        Int     @id @default(autoincrement())
  courseId  Int
  course    Course  @relation(fields: [courseId], references: [id])
  sectionId Int
  section   Section @relation(fields: [sectionId], references: [id])
}

model CourseSectionModule {
  id                      Int                     @id @default(autoincrement())
  name                    String
  descriptionHTML         String
  courseSectionModuleType CourseSectionModuleType
}

enum CourseSectionModuleType {
  file
  note
  exercise
  // ...
}
